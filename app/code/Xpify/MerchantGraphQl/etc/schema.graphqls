enum PricingPlanInterval {
    ONE_TIME
    EVERY_30_DAYS
    ANNUAL
}

type Query {
    myShop: Shop
    @doc(description: "")
    @resolver(class: "Xpify\\MerchantGraphQl\\Model\\Resolver\\MyShopQuery")
}

type Mutation {
    subscribePricingPlan(input: SubscribePricingPlanInput!): SubscribePricingPlanOutput @doc(description: "Subscribe to a pricing plan") @resolver(class: "Xpify\\MerchantGraphQl\\Model\\Resolver\\SubscribePricingPlanMutation")
}

input SubscribePricingPlanInput {
    plan_id: ID!
    interval: PricingPlanInterval! = ONE_TIME @doc(description: "The interval of the subscription. Default: ONE_TIME")
}

type Shop @doc(description: "Follow guide Shopify") {
    id: ID
    email: String
    shop_owner: String
    name: String
    domain: String
    myshopify_domain: String
    x_access_token: String # @doc(description: "Token for authentication, currently is used for WSS connection")
}

type SubscribePricingPlanOutput {
    id: ID! @doc(description: "The ID of the subscription")
    code: String! @doc(description: "The code of the plan subscribed")
    name: String! @doc(description: "The name of the plan subscribed")
    price: Float! @doc(description: "The price of the plan subscribed")
    description: String @doc(description: "The description of the plan subscribed")
    interval: PricingPlanInterval! @doc(description: "The interval of the subscription")
    created_at: String! @doc(description: "The date the subscription was created")
}
